name: java-ci-main
on:
  pull_request:
    branches:
    - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
    - name: Set up JDK 17
      uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
      with:
        java-version: "17"
        distribution: "temurin"
        cache: "maven"
    - name: Verify with Maven
      run: mvn --update-snapshots --batch-mode verify

  get-duplicates:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current branch
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

    - name: Run duplicate check test on current branch
      run: |
        mvn test -Dtest=DuplicatedUnitsTest#getDuplicateConversions
        mkdir -p output
        cp target/surefire-reports/DuplicatedUnitsTest-output.txt output/current_branch.txt

    - name: Upload current branch test results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: current-branch-duplicates
        path: output/current_branch.txt

    - name: Print warning on forks
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      if: github.event.pull_request.head.repo.fork == true
      with:
        script: |
          const fs = require('fs');
          const duplicateContent = fs.readFileSync('output/current_branch.txt', 'utf8');
          console.log("This is a fork, skip PR comment");
          core.warning(duplicateContent, { file: 'versions/v1/units.json' });

    - name: Add Comment to Pull Request
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      if: github.event.pull_request.head.repo.name == github.repository
      with:
        script: |
          const fs = require('fs');
          const duplicateContent = fs.readFileSync('output/current_branch.txt', 'utf8');
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          
          const { data: comments } = await github.rest.issues.listComments({
            owner, repo, issue_number
          });
      
          const botComments = comments.filter(comment => comment.user.login === 'github-actions[bot]');

          for (const comment of botComments) {
            await github.rest.issues.deleteComment({
              owner, repo,
              comment_id: comment.id,
            });
          }

          github.rest.issues.createComment({
            owner, repo, issue_number,
            body: duplicateContent
          })
